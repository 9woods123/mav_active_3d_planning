<launch>
  <!-- Gazebo arguments -->
  <arg name="mav_name" default="firefly"/>
  <arg name="gui" default="false"/>
  <arg name="verbose_gazebo" default="false"/>

  <!-- Voxblox arguments -->
  <arg name="voxel_size" default="0.1"/>
  <arg name="voxels_per_side" default="16"/>
  <arg name="ray_length" default="5.0"/>
  <arg name="method" default="merged"/>
  <arg name="verbose_voxblox" default="false"/>
    
  <!-- Unreal Routine arguments -->
  <arg name="uecv_mode" default="fast"/>
  <arg name="slowdown" default="0.0"/>
  <arg name="delay" default="3.0"/>  
  <arg name="remove_freespace_points" default="false"/>
  
  <!--  Planner arguments (tg_uniform, tg_random_linear, general, nbvp_bircher)-->
  <arg name="use_separate_configs" default="false"/>
  <arg name="planner_general_config" default="planners/nbvp_bircher.yaml"/>
  <arg name="planner_generator_config" default="planners/modules/tg_uniform.yaml"/>
  <arg name="planner_evaluator_config" default="planners/modules/te_frontier.yaml"/>
  <arg name="verbose_planner" default="true"/>
  
  <!--  Experiment arguments -->  
  <arg name="experiment_config" default="experiment1.yaml"/>
  <arg name="record_data" default="true"/>
  <arg name="data_directory" default="/home/lukas/Documents/MT/Data"/> 
  <arg name="data_frequency" default="15.0" />
  <arg name="time_limit" default="30.0" />
  
  
  
  

  <!-- *** Setup experiment params, data, nodes *** -->
  <rosparam command="load" file="$(find mav_active_3d_planning)/cfg/$(arg experiment_config)"/>

  <!-- Setup empty gazebo world for physics-->
  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find unreal_cv_ros)/content/gazebo_empty.world" />
    <arg name="debug" value="false" />
    <arg name="paused" value="true" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="verbose" value="$(arg verbose_gazebo)"/>
  </include>

  <group ns="$(arg mav_name)">
    <!-- Setup a mav with odom sensor -->
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_ground_truth" value="true" />
      <arg name="enable_logging" value="false" />
      <arg name="z" value="0" />
    </include>
    
    <!-- MPC trajectory tracker (sampling time needs to match odom publish rate!)-->
    <node name="mav_nonlinear_mpc" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_node" respawn="true" clear_params="true">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_$(arg mav_name).yaml" />
      <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg mav_name).yaml"/>
      <param name="use_rc_teleop" value="false"/>
      <param name="verbose" value="false" />
      <param name="reference_frame" value="world"/>
      <param name="sampling_time" value="0.0021"/>
    </node>
    
    <!-- Rotor input controller -->
    <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg mav_name).yaml" />
    </node>

    <!-- static camera transform -->
    <node pkg="tf" type="static_transform_publisher" name="tf_camera_to_link" args="0 0 0 -0.5 0.5 -0.5 0.5 /camera_link /camera 100"/>  
  </group>

  <group ns="unreal">
    <!-- Unreal vision client -->
    <node name="unreal_ros_client" pkg="unreal_cv_ros" type="unreal_ros_client.py" required="true" output="screen">
      <param name="mode" value="$(arg uecv_mode)"/>
      <param name="publish_tf" value="true"/>
      <param name="collision_on" value="true"/>
      <param name="slowdown" value="$(arg slowdown)"/>
      <remap from="odometry" to="/$(arg mav_name)/ground_truth/odometry" />
    </node>
    
    <!-- Unreal sensor model -->
    <node name="unreal_sensor_model" pkg="unreal_cv_ros" type="sensor_model.py" output="screen">
      <param name="camera_params_ns" value="/unreal/unreal_ros_client/camera_params"/>
      <param name="flatten_distance" value="$(eval 0.5 + arg('ray_length'))"/>
      <remap from="ue_sensor_raw" to="unreal_ros_client/ue_sensor_raw" />
    </node>
    <group if="$(arg remove_freespace_points)">
      <param name="unreal_sensor_model/maximum_distance" value="$(arg ray_length)"/>
    </group>
    
    <!-- Simulation manager for launching the MAV and monitoring -->
    <node name="simulation_manager" pkg="unreal_cv_ros" type="simulation_manager.py" output="screen">
      <param name="ns_mav" value="/$(arg mav_name)" />
      <param name="ns_gazebo" value="/gazebo" />
      <param name="monitor" value="true" />
      <param name="horizon" value="20" />
      <remap from="ue_raw_in" to="unreal_ros_client/ue_sensor_raw" />
      <remap from="ue_out_in" to="unreal_sensor_model/ue_sensor_out" />
    </node>
    
    <!-- Experiment launcher, data generation-->
    <node name="eval_data_node" pkg="mav_active_3d_planning" type="eval_data_node.py" output="screen" required="true">
      <remap from="ue_out_in" to="unreal_sensor_model/ue_sensor_out" />
      <remap from="unreal_simulation_ready" to="simulation_manager/simulation_ready" />
      <remap from="collision" to="unreal_ros_client/collision" />
      <param name="ns_planner" value="/planner/planner_node" />
      <param name="ns_voxblox" value="/planner/voxblox_node" />
      <param name="delay" value="$(arg delay)" />
      <param name="evaluate" value="$(arg record_data)" />
      <param name="eval_directory" value="$(arg data_directory)" />
      <param name="eval_frequency" value="$(arg data_frequency)" />
      <param name="time_limit" value="$(arg time_limit)" />
    </node>
    
    <!-- Record a rosbag of the visualization-->
    <node pkg="rosbag" type="record" name="rosbag_vis_recorder"
       args="record -o $(arg data_directory)/tmp_bags/tmp_bag /rosout /clock /tf /planner/voxblox_node/mesh /firefly/reference_trajectory /firefly/base_link /planner/trajectory_visualization" if="$(arg record_data)" />
  </group>

  <group ns="planner">
    <!-- Voxblox -->
    <node name="voxblox_node" pkg="voxblox_ros" type="esdf_server" output="screen" args="-alsologtostderr">
      <remap from="pointcloud" to="/unreal/unreal_sensor_model/ue_sensor_out"/>
      <param name="publish_esdf_map" value="true" />
      <param name="publish_pointclouds" value="true" />
      <param name="tsdf_voxel_size" value="$(arg voxel_size)" />
      <param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)" />
      <param name="color_mode" value="color" />
      <param name="use_tf_transforms" value="true" />
      <param name="update_mesh_every_n_sec" value="1.0" />
      <param name="method" value="$(arg method)" />
      <param name="max_ray_length" value="$(arg ray_length)" />
      <param name="allow_clear" value="true" />
      <param name="verbose" value="$(arg verbose_voxblox)" />
    </node>
    
    <!-- Planner -->
    <node name="planner_node" pkg="mav_active_3d_planning" type="planner_node" output="screen" >
      <remap from="planner_node/esdf_map_in" to="voxblox_node/esdf_map_out" />
      <param name="use_tf_transforms" value="true" />
      <param name="tsdf_voxel_size" value="$(arg voxel_size)" />
      <param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)" />
      <param name="update_mesh_every_n_sec" value="0.0" />
    
      <remap from="odometry" to="/$(arg mav_name)/ground_truth/odometry" />
      <remap from="command/trajectory" to="/$(arg mav_name)/command/trajectory" />
      <param name="verbose" value="$(arg verbose_planner)" />
      <param name="log_performance" value="$(arg record_data)" />
    
        <!-- Experiment dependent -->
      <param name="trajectory_evaluator/camera_params_ns" value="/unreal/unreal_ros_client/camera_params" />    
      <param name="trajectory_evaluator/ray_length" value="/$(arg ray_length)" />
      
      <!-- General Config -->    
      <rosparam command="load" file="$(find mav_active_3d_planning)/cfg/$(arg planner_general_config)"/>
    </node>    
    <group if="$(arg use_separate_configs)">
      <!-- Modular config -->    
      <rosparam command="load" file="$(find mav_active_3d_planning)/cfg/$(arg planner_generator_config)" ns="planner_node"/>
      <rosparam command="load" file="$(find mav_active_3d_planning)/cfg/$(arg planner_evaluator_config)" ns="planner_node"/> 
    </group>
 </group>

  <!-- RVIZ Visualization -->
  <node type="rviz" name="rviz_voxblox" pkg="rviz" args="-d $(find mav_active_3d_planning)/cfg/experiment_visualization.rviz"/>
</launch>
