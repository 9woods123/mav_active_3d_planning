<launch>
  <!-- Gazebo arguments -->
  <arg name="mav_name" default="firefly"/>
  <arg name="gui" default="false"/>
  <arg name="verbose_gazebo" default="false"/>

  <!-- Voxblox arguments -->
  <arg name="voxel_size" default="0.10"/>
  <arg name="voxels_per_side" default="16"/>
  <arg name="ray_length" default="5.0"/>
  <arg name="method" default="merged"/>
  <arg name="verbose_voxblox" default="false"/>
    
  <!-- Unreal Routine arguments -->
  <arg name="uecv_mode" default="fast"/>
  <arg name="slowdown" default="0.0"/>
  <arg name="delay" default="3.0"/>  
  
  <!-- Unreal Sensor arguments (ground_truth, kinect, gaussian_depth_noise)-->
  <arg name="model_type" default="gaussian_depth_noise"/>
  <arg name="flatten_distance" default="6.0"/>
  <arg name="maximum_distance" default="0.0"/>
  
  <!-- Odometry  arguments (random_walk, ground_truth)-->
  <arg name="use_rovio" default="false"/>
  <arg name="odom_noise_model" default="random_walk"/>
  
  <!--  Planner arguments (tg_uniform, tg_random_linear, tg_rrt, general, nbvp_bircher, te_frontier, te_yaw, weight_planner, real_world)-->
  <arg name="use_separate_configs" default="false"/>
  <arg name="planner_general_config" default="planners/weight_planner_new_vol.yaml"/>
  <arg name="planner_generator_config" default="planners/modules/tg_rrt.yaml"/>
  <arg name="planner_evaluator_config" default="planners/modules/te_weight.yaml"/>
  <arg name="verbose_planner" default="true"/>
  <arg name="visualize" default="true"/>
  
  <!--  Experiment arguments -->  
  <arg name="experiment_config" default="experiment4.yaml"/>
  <arg name="record_data" default="true"/>
  <arg name="record_visualization" default="true"/>
  <arg name="data_directory" default="/home/lukas/Documents/MT/Data/rapid"/> 
  <arg name="data_frequency" default="30.0" />
  <arg name="time_limit" default="30" />
  
  
  
  

  <!-- *** Setup experiment params, data, nodes *** -->
  <rosparam command="load" file="$(find mav_active_3d_planning)/cfg/experiments/$(arg experiment_config)"/>

  <!-- Setup empty gazebo world for physics-->
  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find unreal_cv_ros)/content/gazebo_empty.world" />
    <arg name="debug" value="false" />
    <arg name="paused" value="true" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="verbose" value="$(arg verbose_gazebo)"/>
  </include>

  <group ns="$(arg mav_name)">
    <!-- Setup a mav -->
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_ground_truth" value="true" />
      <arg name="enable_logging" value="false" />
      <arg name="z" value="0" />
    </include>
    
    <!-- MPC trajectory tracker (0.0021 sampling time needs to match odom publish rate!)-->
    <node name="mav_nonlinear_mpc" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_node" respawn="true" clear_params="true">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_$(arg mav_name)_rapid.yaml" />
      <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg mav_name).yaml"/>
      <param name="use_rc_teleop" value="false"/>
      <param name="verbose" value="false" />
      <param name="reference_frame" value="world"/>
      <param name="sampling_time" value="0.0021"/>
    </node>
    
    <!-- Rotor input controller -->
    <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg mav_name).yaml" />
    </node>
    
    <!-- Odometry: noise model / rovio -->
    <node pkg="rovio" type="rovio_node" name="rovio" output="screen" if="$(arg use_rovio)">
      <param name="filter_config" value="$(find mav_active_3d_planning)/cfg/rovio/rovio.info"/>
      <param name="camera0_config" value="$(find mav_active_3d_planning)/cfg/rovio/unreal_cam0.yaml"/>
      <remap from="cam0/image_raw" to="/unreal/unreal_sensor_model/ue_gray_image_out" />
      <remap from="imu0" to="ground_truth/imu" />
    </node>
    <node name="odometry_noise_model" pkg="mav_active_3d_planning" type="gps_odometry_simulator.py" output="screen" unless="$(arg use_rovio)">
      <param name="position_uncertainty" value="0.05"/>
      <param name="roll_pitch_uncertainty" value="1.5" />
      <param name="yaw_uncertainty" value="5.0" />
      <param name="noise_model" value="$(arg odom_noise_model)" />
      <param name="publish_tf" value="true" />
      <remap from="odometry_in" to="ground_truth/odometry" />
    </node> 

    <!-- static camera transform -->
    <node pkg="tf" type="static_transform_publisher" name="tf_camera_to_link" args="0 0 0 -0.5 0.5 -0.5 0.5 /camera_link /camera 100"/>  
  </group>

  <group ns="unreal">
    <!-- Unreal vision client -->
    <node name="unreal_ros_client" pkg="unreal_cv_ros" type="unreal_ros_client.py" required="true" output="screen">
      <param name="mode" value="$(arg uecv_mode)"/>
      <param name="publish_tf" value="false"/>
      <param name="collision_on" value="true"/>
      <param name="slowdown" value="$(arg slowdown)"/>
      <remap from="odometry" to="/$(arg mav_name)/ground_truth/odometry" />
    </node>
    
    <!-- Unreal sensor model -->
    <node name="unreal_sensor_model" pkg="unreal_cv_ros" type="sensor_model.py" output="screen">
      <param name="camera_params_ns" value="/unreal/unreal_ros_client/camera_params"/>
      <param name="flatten_distance" value="$(arg flatten_distance)"/>
      <param name="model_type" value="$(arg model_type)" />
      <param name="maximum_distance" value="$(arg maximum_distance)" />
      <param name="k_mu_2" value="0.0024" />
      <param name="k_sigma_2" value="0.0024" />
      <remap from="ue_sensor_raw" to="unreal_ros_client/ue_sensor_raw" />
    </node>

    <!-- Simulation manager for launching the MAV and monitoring -->
    <node name="simulation_manager" pkg="unreal_cv_ros" type="simulation_manager.py" output="screen">
      <param name="ns_mav" value="/$(arg mav_name)" />
      <param name="ns_gazebo" value="/gazebo" />
      <param name="monitor" value="true" />
      <param name="horizon" value="20" />
      <remap from="ue_raw_in" to="unreal_ros_client/ue_sensor_raw" />
      <remap from="ue_out_in" to="unreal_sensor_model/ue_sensor_out" />
    </node>
    
    <!-- Experiment launcher, data generation-->
    <node name="eval_data_node" pkg="mav_active_3d_planning" type="eval_data_node.py" output="screen" required="true">
      <remap from="ue_out_in" to="unreal_sensor_model/ue_sensor_out" />
      <remap from="unreal_simulation_ready" to="simulation_manager/simulation_ready" />
      <remap from="collision" to="unreal_ros_client/collision" />
      <param name="ns_planner" value="/planner/planner_node" />
      <param name="ns_voxblox" value="/planner/voxblox_node" />
      <param name="delay" value="$(arg delay)" />
      <param name="startup_timeout" value="30.0" />
      <param name="evaluate" value="$(arg record_data)" />
      <param name="eval_directory" value="$(arg data_directory)" />
      <param name="eval_frequency" value="$(arg data_frequency)" />
      <param name="time_limit" value="$(arg time_limit)" />
    </node>
    
    <!-- Record a rosbag of the visualization-->
    <node pkg="rosbag" type="record" name="rosbag_vis_recorder"
       args="record -o $(arg data_directory)/tmp_bags/tmp_bag /rosout /clock /tf /planner/voxblox_node/mesh /firefly/reference_trajectory /firefly/base_link /planner/trajectory_visualization" if="$(eval arg('record_data') and arg('record_visualization'))"/>
  </group>

  <group ns="planner">
    <!-- Voxblox -->
    <node name="voxblox_node" pkg="voxblox_ros" type="esdf_server" output="screen" args="-alsologtostderr">
      <remap from="pointcloud" to="/unreal/unreal_sensor_model/ue_sensor_out"/>
      <remap from="transform" to="/$(arg mav_name)/rovio/transform" if="$(arg use_rovio)"/>
      <rosparam command="load" file="$(find mav_active_3d_planning)/cfg/voxblox/transforms.yaml" if="$(arg use_rovio)"/> 
      <param name="use_tf_transforms" value="$(eval arg('use_rovio') == false)"/>
      <param name="publish_tsdf_map" value="true" />
      <param name="publish_esdf_map" value="true" />
      <param name="tsdf_voxel_size" value="$(arg voxel_size)" />
      <param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)" />
      <param name="color_mode" value="color" />
      <param name="update_mesh_every_n_sec" value="1.0" />
      <param name="method" value="$(arg method)" />
      <param name="max_ray_length" value="$(arg ray_length)" />
      <param name="allow_clear" value="true" />
      <param name="verbose" value="$(arg verbose_voxblox)" />
      <param name="publish_map_incremental" value="true" />
    </node>
    
    <!-- Planner -->		
    <!--rapid-->
 	  <node
	  pkg="realsense_exploration"
	  type="realsense_exploration_node"
	  name="realsense_exploration_node"
	  output="screen"
	  args="--v=3">
	  <rosparam file="$(find mav_active_3d_planning)/cfg/rapid/planner.yaml"/>
<!--	  <remap from="cloud_in" to="pcl_transformer/pcl_out" />	-->
	  <remap from="cloud_in" to="/unreal/unreal_sensor_model/ue_sensor_out" />	
	  <!-- input cloud, in world frame! -->
	  <remap from="pose_estimate" to="aep_adaptor/pose_out"/>  <!-- pose estimate passed to the algorithm -->
	  <remap from="manual_desired_velocity" to="/velocity_cmd"/> <!-- velocity commands produced by the algorithm in world frame -->
	  <remap from="start_exploration" to="/start_exploration"/>
	  <remap from="land" to="/land"/>	  
	  <remap from="off" to="/off"/>
	  <remap from="octomap_full" to="/octomap_full"/>
	  <remap from="feedthrough" to="/feedthrough"/>  
</node>
		
	  <!-- pose_adaptor -->
		<node name="aep_adaptor" pkg="mav_active_3d_planning" type="aep_adaptor.py" output="screen" required="true">
	    <remap from="odometry_in" to="/$(arg mav_name)/ground_truth/odometry" />
	  </node>
	  <!-- traj adaptor -->
	  <node name="rapid_trajectory_adapter" pkg="mav_active_3d_planning" type="rapid_trajectory_adapter" output="screen" required="true">
		    <remap from="command/trajectory" to="/$(arg mav_name)/command/trajectory" />
		    <remap from="vel_in" to="/velocity_cmd" />
		    <remap from="pose_in" to="aep_adaptor/pose_out" />
		  </node>
	  <!-- pcl adaptor -->
<!--		<node name="pcl_transformer" pkg="mav_active_3d_planning" type="pcl_transformer.py" output="screen" required="true">-->
<!--	    <remap from="~pcl_in" to="/unreal/unreal_sensor_model/ue_sensor_out" />-->
<!--	  </node>-->
	  
<!--		  <node name="aep_trajectory_adapter" pkg="mav_active_3d_planning" type="aep_trajectory_adapter" output="screen" required="true">-->
<!--		    <remap from="command/trajectory" to="/$(arg mav_name)/command/trajectory" />-->
<!--		    <remap from="traj_in" to="/mavros/setpoint_position/local" />-->
<!--		    <remap from="pose_in" to="aep_adaptor/pose_out" />-->
<!--		  </node>-->
	  
		<!-- tf -->
		<node pkg="tf" type="static_transform_publisher" name="tf_aep" args="0 0 0 0 0 0 1 /world /map 100"/> 
		<node pkg="tf" type="static_transform_publisher" name="tf_aep2" args="0 0 0 0 0 0 1 /camera_link /base_link 100"/> 

    
 </group>

  <!-- RVIZ Visualization -->
  <node type="rviz" name="rviz_voxblox" pkg="rviz" args="-d $(find mav_active_3d_planning)/cfg/rapid/visualization.rviz" if="$(arg visualize)"/>
</launch>
